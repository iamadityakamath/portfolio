import { Message } from '../components/ChatBot';
import {GoogleGenAI} from '@google/genai';

// Get the API key from environment variables
const API_KEY = import.meta.env.GEMINI_API_KEY;

// Check if API key is available
if (!API_KEY) {
  console.error('GEMINI_API_KEY is not defined in environment variables');
}

// Interface for the Gemini API request
interface GeminiRequest {
  contents: {
    role: string;
    parts: {
      text: string;
    }[];
  }[];
  generationConfig: {
    temperature: number;
    topP: number;
    topK: number;
    maxOutputTokens: number;
  };
}

// Interface for the Gemini API response
interface GeminiResponse {
  candidates: {
    content: {
      parts: {
        text: string;
      }[];
    };
  }[];
}

// Convert our app's message format to Gemini's format
const formatMessagesForGemini = (messages: Message[]): GeminiRequest['contents'] => {
  return messages.map(message => ({
    role: message.sender === 'user' ? 'user' : 'model',
    parts: [{ text: message.text }]
  }));
};

// Define the response type for the Gemini API
interface GeminiResponseData {
  text: string;
  suggestions: string[];
}

// Function to call the Gemini API
export const generateResponse = async (messages: Message[]): Promise<string | GeminiResponseData> => {
  try {
    // Format the messages for the Gemini API
    const formattedMessages = formatMessagesForGemini(messages);
    
    // Create the request payload
    const payload: GeminiRequest = {
      contents: formattedMessages,
      generationConfig: {
        temperature: 0.7,
        topP: 0.95,
        topK: 40,
        maxOutputTokens: 1024
      }
    };
    console.log(formattedMessages[1].parts[0].text);


    
    const ai = new GoogleGenAI({ apiKey: API_KEY });
    const contents = [{
        role: "user",
        parts: [
          {text: "here is my Resume:\nAditya Kamath\nMumbai\n📞 +91-7021326920 | ✉️ adityasureshkamath@gmail.com\n🔗 LinkedIn | 🖥️ GitHub\n\nExperience\nQuantiphi\nMachine Learning Engineer (Dec 2022 – Present) | Mumbai, India\n\nDeveloped and maintained the ML backend for ICICI Bank chatbots across platforms with over 10k daily active users.\n\nEnhanced chatbot user interactions by 30% through optimization of an open-source model, leading to a 15% reduction in downtime.\n\nImproved system scalability using Docker and Kubernetes, reducing deployment time by 25% and ensuring robust performance across all platforms.\n\nBuilt and optimized end-to-end ML pipelines for TIAA using Google Contact Center AI, enabling sentiment analysis and topic tagging, and populating real-time insights into dashboards with a 50% performance improvement via OOP and multiprocessing techniques.\n\nResearched and implemented Generative AI in private environments for a pharmaceutical company, achieving 93% accuracy in document-indexed responses by training models on sensitive data.\n\nMachine Learning Engineer Intern (Aug 2022 – Dec 2022)\n\nDesigned a pipeline to monitor and analyze responses generated by the Flan-T5 model, ensuring quality and relevance.\n\nApplied LDA and Top2Vec algorithms for topic modeling on unsupervised conversation data, improving data insights.\n\nConducted code reviews and resolved issues during model training and deployment, reducing error rates by 12%.\n\nPhemesoft\nAndroid App Developer Intern (May 2021 – June 2021) | Mumbai, India\n\nDeveloped an attendance app with real-time geolocation tracking using Firebase.\n\nIncorporated a single-page login system with role-based access for Admin, Employer, and Employee users.\n\nProjects\nConversation Confidence Coach (Nov 2021 - Mar 2022)\nBuilt a speaker confidence classification system for online interviews using blink, pose, and gaze detection algorithms.\n\nTrained models like Multi-layer Perceptron and Support Vector Machines for speech emotion recognition, achieving 83% accuracy.\n\nSelf-Driving Car Simulation using Deep Learning (Jul 2021 - Oct 2021)\nAugmented and pre-processed 10,000 images using data points from the Udacity Simulator.\n\nExecuted a CNN model inspired by NVIDIA research, enabling autonomous vehicle navigation across 100 laps.\n\nSmart Cart using Raspberry Pi (Dec 2020 - Apr 2021)\nDesigned an IoT-based smart cart system with weighted precision of 0.92 for walk-out shopping.\n\nIntegrated a CNN classifier and QR code scanner, reducing the false positive rate by 27%.\n\nEducation\nMukesh Patel School of Technology Management and Engineering (Jun 2018 – Aug 2022)\nBachelor of Technology in Electronics and Telecommunications (CGPA: 3.95/4)\n\nRelated Courses: Computer Networks, Database Management Systems, Statistical Methods and Analysis, Speech Processing, Image and Video Processing\n\nMinor in Artificial Intelligence and Machine Learning\n\nRelated Courses: Machine Learning, Deep Learning, Pattern and Anomaly Detection\n\nSkills\nLanguages: Python, SQL\n\nDatabases: BigQuery, Redis, Postgres, Firestore, MongoDB, MySQL\n\nTools: Git, Postman, GCP (Cloud Run, Cloud Functions, Kubernetes, Vertex AI, Log Explorer), Docker, Tableau, Power BI\n\nFrameworks: Flask, FastAPI, Apache Beam, LangChain, TensorFlow, PyTorch, Scikit-learn, NumPy, Pandas, SciPy\n\nCloud: Google Cloud Platform, Terraform\n\nTechnical Skills: Supervised Learning, Unsupervised Learning, Data Preprocessing, Topic Modeling, Natural Language Processing, Statistical Analysis, Predictive Analysis, Sentence-Transformers\n\nCertifications\nGoogle Cloud Platform: Google Cloud Professional Machine Learning Engineer, Google Cloud Certified Professional Cloud Architect, Google Cloud Certified Associate Cloud Engineer\n\nIBM: Artificial Intelligence & Machine Learning Graduate\n\n\nOn the basis of question, answer from the resume context given above. Once answer is done, also send a json format of suggestions that user might want to know out of the following topics.\n1. Projects\n2. work experience\n3. Technical skills\n4. certifications\n5. contact info\n\nonly send the above incase you feel its relevant and select the ones that are actally relevant.\nsend the result in this format:\n{\"bot_ans\": \"sample ans\",\"suggestions\":['work experience','certifications']}\n"},
        ],
      },
      {
        role: "model",
        parts: [
          {text: "The user wants me to act as a chatbot for their resume.\nI need to understand the resume provided and answer questions based *only* on that information.\nAfter answering a question, I need to provide relevant suggestions for follow-up questions in JSON format.\nThe suggestions should be chosen from the predefined list: Projects, work experience, Technical skills, certifications, contact info.\nI should only suggest topics that are relevant to the previous question or the overall context.\nThe final output should be in the specified JSON format: `{\"botans\": \"sample ans\",\"suggestions\":['work experience','certifications']}`\n\nOkay, I've processed the resume and understand the requirements. I'm ready for the first question."},
          {text: "Okay, I have reviewed your resume and I'm ready to answer questions based on it.\n\nHow can I help you today? Ask me anything about Aditya Kamath's experience, projects, skills, or education!"},
        ],
      },
      {
        role: "user",
        parts: [
          {text: String(formattedMessages[1].parts[0].text)},
        ],
      },
    ]
    console.log(contents);
    const response = await ai.models.generateContent({
        model: "gemini-2.5-pro-exp-03-25",
        contents: contents

      });
      
    
      console.log(response);
    // const response = await ai.models.generateContent({
    //     model: 'gemini-2.0-flash-001',
    //     contents: payload.contents,
    //     // generationConfig: payload.generationConfig
    // });
    // console.log(response);
    
    // The response from GoogleGenAI library is already structured
    // We need to extract the text from the response object
    if (!response || !response.text) {
      console.error('Gemini API error: No valid response');
      throw new Error('No valid response from Gemini API');
    }

    // Extract the response text from the structured response
    const candidates = response.candidates;
    if (candidates && candidates.length > 0 && 
        candidates[0].content && 
        candidates[0].content.parts && 
        candidates[0].content.parts.length > 0) {
        const responseText = String(candidates[0].content.parts[0].text);
        
        // Try to parse the response as JSON to extract bot_ans and suggestions
        try {
          // Check if the response contains a JSON object with bot_ans
          if (responseText.includes('"bot_ans"')) {
            // Extract JSON from the response text (handling potential markdown code blocks)
            const jsonMatch = responseText.match(/\{.*"bot_ans".*\}/s);
            if (jsonMatch) {
              const jsonStr = jsonMatch[0];
              const parsedResponse = JSON.parse(jsonStr);
              
              if (parsedResponse && parsedResponse.bot_ans) {
                // Return the full parsed response object with both text and suggestions
                return {
                  text: parsedResponse.bot_ans,
                  suggestions: parsedResponse.suggestions || []
                };
              }
            }
          }
          
          // If we couldn't parse JSON or extract bot_ans, return the original text without suggestions
          return {
            text: responseText,
            suggestions: []
          };
        } catch (parseError) {
          console.log('Error parsing JSON response:', parseError);
          // Return the original text if JSON parsing fails
          return {
            text: responseText,
            suggestions: []
          };
        }
    } else {
      throw new Error('No valid response content from Gemini API');
    }
  } catch (error) {
    console.error('Error calling Gemini API:', error);
    return "I'm having trouble connecting right now. Please try again later.";
  }
};